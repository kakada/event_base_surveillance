version: '3'

volumes:
  bundle:
  elastic:
  certs:

services:
  db:
    image: postgres
    volumes:
      - ./tmp/db:/var/lib/postgresql/data

  web: &rails
    build:
      context: .
      dockerfile: Dockerfile.dev
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -b '0.0.0.0'"
    volumes:
      - .:/app
      - bundle:/usr/local/bundle
      - certs:$CERTS_DIR
    depends_on:
      - db
      - redis
      - elasticsearch
    tmpfs: /app/tmp
    ports:
      - "3000:3000"
    env_file: app.env
    environment:
      - ELASTICSEARCH_URL=https://elasticsearch:9200
      - ELASTICSEARCH_REQUEST_TIMEOUT=300 #seconds
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - ELASTIC_COMPRESSION=true
      - ELASTIC_CA_FILE=$CERTS_DIR/ca/ca.crt
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    tty: true
    stdin_open: true

  sidekiq:
    <<: *rails
    command: bundle exec sidekiq -C config/sidekiq.yml
    ports: []

  redis:
    container_name: redis
    image: redis

  elasticsearch:
    image: elasticsearch:7.4.1
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=$ELASTIC_PASSWORD
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=$CERTS_DIR/es01/es01.key
      - xpack.security.http.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.http.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.verification_mode=certificate 
      - xpack.security.transport.ssl.certificate_authorities=$CERTS_DIR/ca/ca.crt
      - xpack.security.transport.ssl.certificate=$CERTS_DIR/es01/es01.crt
      - xpack.security.transport.ssl.key=$CERTS_DIR/es01/es01.key
    volumes: 
      - elastic:/usr/share/elasticsearch/data
      - certs:$CERTS_DIR
    healthcheck:
      test: curl --cacert $CERTS_DIR/ca/ca.crt -s https://localhost:9200 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - 9200:9200

  ngrok:
    image: wernight/ngrok
    ports:
      - 4040:4040
    environment:
      NGROK_PORT: 'web:3000'
